package test//object Test  {//  def hex2bytes(hex: String): Array[Byte] = {//    hex.replaceAll("[^0-9A-Fa-f]", "").sliding(2, 2).toArray.map(Integer.parseInt(_, 16).toByte)//  }////  def bytes2hex(bytes: Array[Byte], sep: Option[String] = None): String = {//    sep match {//      case None => bytes.map("%02x".format(_)).mkString//      case _ => bytes.map("%02x".format(_)).mkString(sep.getByteBuffer)//    }//    // bytes.foreach(println)//  }////  def example {//    val data = "48 65 6C 6C 6F 20 57 6F 72 6C 64 21 21"//    val bytes = hex2bytes(data)//    println(bytes2hex(bytes, Option(" ")))////    val data2 = "48-65-6C-6C-6F-20-57-6F-72-6C-64-21-21"//    val bytes2 = hex2bytes(data2)//    println(bytes2hex(bytes2, Option("-")))////    val data3 = "48656C6C6F20576F726C642121"//    val bytes3 = hex2bytes(data3)//    println(bytes2hex(bytes3))//  }//  def main(args:Array[String]) = {//    println("hello, scala sbt project from intellij")//    example//    val data = test.TestByte.send(); // get byte[] from java//    val data = test.TestByte.sendByteBuffer();//    val data = TestByte.sendByteBufferWithString();//    var byte: Byte = 0;//    while (!(byte = data.get()).equals(0x0)) {//      println(data.position());//    }//    val bytebuf = ByteBuffer.wrap(data); // wrap byte[] as bytebuffer//    val dataByte = bytebuf.get();//    data.flip();//    val dataShort = data.getShort;//    val dataShort = bytebuf.asShortBuffer().get(0);//    val dataInt = bytebuf.getInt;//    val dataToSend = new ArrayBuffer[Byte]();//    dataToSend.++=(ByteBuffer.allocate(8).putInt(dataInt).array());//    dataToSend.++=(Byt)//    TestByte.getByte(dataToSend.toArray);//    val msgType = data(0)//    val char = data(2)//    test.TestByte.getByteBuffer(data)//    val userId: Int = 0xffff;//    val bytes = ByteBuffer.allocate(8);//    var n = bytes.remaining();//    val intBytes = ByteBuffer.allocate(4).putInt(0xffff).array();//    val result = new ArrayBuffer[Byte]();//    val userIdBytes = ByteBuffer.allocate(4).putInt(0xf0f0ffff).array();//    result.++=(userIdBytes);//    val userIdBytes2 = ByteBuffer.allocate(4).putInt(0x0f0f).array();//    result.++=(userIdBytes2);//    n = intBytes.remaining();//    bytes.put(intBytes);//    intBytes.put(bytes);//    test.TestByte.getByte(result.toArray);//    test.TestByte.getByteBuffer(bytes);//    test.TestByte.getByteBuffer(ByteBuffer.wrap(result))//    val str = TestByte.sendString();//    println(str);//    while ()//  }//}