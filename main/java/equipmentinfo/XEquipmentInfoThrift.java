/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package equipmentinfo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class XEquipmentInfoThrift implements org.apache.thrift.TBase<XEquipmentInfoThrift, XEquipmentInfoThrift._Fields>, java.io.Serializable, Cloneable, Comparable<XEquipmentInfoThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("XEquipmentInfoThrift");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_PHYSICAL_ATK_FIELD_DESC = new org.apache.thrift.protocol.TField("minPhysicalAtk", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_PHYSICAL_ATK_FIELD_DESC = new org.apache.thrift.protocol.TField("maxPhysicalAtk", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ARMOR_FIELD_DESC = new org.apache.thrift.protocol.TField("armor", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ELEMENT_DEF_FIELD_DESC = new org.apache.thrift.protocol.TField("elementDef", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ELEMENT_ATK_FIELD_DESC = new org.apache.thrift.protocol.TField("elementAtk", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LUCK_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("luckValue", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField GREED_FIELD_DESC = new org.apache.thrift.protocol.TField("greed", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField HP_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("hpRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField ARMOR_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("armorRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField EVASION_FIELD_DESC = new org.apache.thrift.protocol.TField("evasion", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField MOVE_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("moveSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField ATTACK_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("attackSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField HIT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("hitRate", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField MP_REGEN_FIELD_DESC = new org.apache.thrift.protocol.TField("mpRegen", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField CRITICAL_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("criticalRate", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField CRITICAL_DMG_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("criticalDmgRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField CRUSHING_BLOW_CHANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("crushingBlowChance", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField DEALT_DMG_DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("dealtDmgDiscount", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField DMG_IMMORTAL_CHANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("dmgImmortalChance", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField HP_DRAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("hpDrain", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField DMG_REFLECTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("dmgReflective", org.apache.thrift.protocol.TType.I32, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new XEquipmentInfoThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new XEquipmentInfoThriftTupleSchemeFactory());
  }

  public long itemId; // required
  public int id; // required
  public String displayName; // required
  public int minPhysicalAtk; // required
  public int maxPhysicalAtk; // required
  public int armor; // required
  public int elementDef; // required
  public int elementAtk; // required
  public int luckValue; // required
  public double greed; // required
  public double hpRatio; // required
  public double armorRatio; // required
  public double evasion; // required
  public double moveSpeed; // required
  public double attackSpeed; // required
  public double hitRate; // required
  public double mpRegen; // required
  public double criticalRate; // required
  public double criticalDmgRatio; // required
  public double crushingBlowChance; // required
  public double dealtDmgDiscount; // required
  public double dmgImmortalChance; // required
  public int hpDrain; // required
  public int dmgReflective; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "itemId"),
    ID((short)2, "id"),
    DISPLAY_NAME((short)3, "displayName"),
    MIN_PHYSICAL_ATK((short)4, "minPhysicalAtk"),
    MAX_PHYSICAL_ATK((short)5, "maxPhysicalAtk"),
    ARMOR((short)6, "armor"),
    ELEMENT_DEF((short)7, "elementDef"),
    ELEMENT_ATK((short)8, "elementAtk"),
    LUCK_VALUE((short)9, "luckValue"),
    GREED((short)10, "greed"),
    HP_RATIO((short)11, "hpRatio"),
    ARMOR_RATIO((short)12, "armorRatio"),
    EVASION((short)13, "evasion"),
    MOVE_SPEED((short)14, "moveSpeed"),
    ATTACK_SPEED((short)15, "attackSpeed"),
    HIT_RATE((short)16, "hitRate"),
    MP_REGEN((short)17, "mpRegen"),
    CRITICAL_RATE((short)18, "criticalRate"),
    CRITICAL_DMG_RATIO((short)19, "criticalDmgRatio"),
    CRUSHING_BLOW_CHANCE((short)20, "crushingBlowChance"),
    DEALT_DMG_DISCOUNT((short)21, "dealtDmgDiscount"),
    DMG_IMMORTAL_CHANCE((short)22, "dmgImmortalChance"),
    HP_DRAIN((short)23, "hpDrain"),
    DMG_REFLECTIVE((short)24, "dmgReflective");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // ID
          return ID;
        case 3: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 4: // MIN_PHYSICAL_ATK
          return MIN_PHYSICAL_ATK;
        case 5: // MAX_PHYSICAL_ATK
          return MAX_PHYSICAL_ATK;
        case 6: // ARMOR
          return ARMOR;
        case 7: // ELEMENT_DEF
          return ELEMENT_DEF;
        case 8: // ELEMENT_ATK
          return ELEMENT_ATK;
        case 9: // LUCK_VALUE
          return LUCK_VALUE;
        case 10: // GREED
          return GREED;
        case 11: // HP_RATIO
          return HP_RATIO;
        case 12: // ARMOR_RATIO
          return ARMOR_RATIO;
        case 13: // EVASION
          return EVASION;
        case 14: // MOVE_SPEED
          return MOVE_SPEED;
        case 15: // ATTACK_SPEED
          return ATTACK_SPEED;
        case 16: // HIT_RATE
          return HIT_RATE;
        case 17: // MP_REGEN
          return MP_REGEN;
        case 18: // CRITICAL_RATE
          return CRITICAL_RATE;
        case 19: // CRITICAL_DMG_RATIO
          return CRITICAL_DMG_RATIO;
        case 20: // CRUSHING_BLOW_CHANCE
          return CRUSHING_BLOW_CHANCE;
        case 21: // DEALT_DMG_DISCOUNT
          return DEALT_DMG_DISCOUNT;
        case 22: // DMG_IMMORTAL_CHANCE
          return DMG_IMMORTAL_CHANCE;
        case 23: // HP_DRAIN
          return HP_DRAIN;
        case 24: // DMG_REFLECTIVE
          return DMG_REFLECTIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITEMID_ISSET_ID = 0;
  private static final int __ID_ISSET_ID = 1;
  private static final int __MINPHYSICALATK_ISSET_ID = 2;
  private static final int __MAXPHYSICALATK_ISSET_ID = 3;
  private static final int __ARMOR_ISSET_ID = 4;
  private static final int __ELEMENTDEF_ISSET_ID = 5;
  private static final int __ELEMENTATK_ISSET_ID = 6;
  private static final int __LUCKVALUE_ISSET_ID = 7;
  private static final int __GREED_ISSET_ID = 8;
  private static final int __HPRATIO_ISSET_ID = 9;
  private static final int __ARMORRATIO_ISSET_ID = 10;
  private static final int __EVASION_ISSET_ID = 11;
  private static final int __MOVESPEED_ISSET_ID = 12;
  private static final int __ATTACKSPEED_ISSET_ID = 13;
  private static final int __HITRATE_ISSET_ID = 14;
  private static final int __MPREGEN_ISSET_ID = 15;
  private static final int __CRITICALRATE_ISSET_ID = 16;
  private static final int __CRITICALDMGRATIO_ISSET_ID = 17;
  private static final int __CRUSHINGBLOWCHANCE_ISSET_ID = 18;
  private static final int __DEALTDMGDISCOUNT_ISSET_ID = 19;
  private static final int __DMGIMMORTALCHANCE_ISSET_ID = 20;
  private static final int __HPDRAIN_ISSET_ID = 21;
  private static final int __DMGREFLECTIVE_ISSET_ID = 22;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_PHYSICAL_ATK, new org.apache.thrift.meta_data.FieldMetaData("minPhysicalAtk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_PHYSICAL_ATK, new org.apache.thrift.meta_data.FieldMetaData("maxPhysicalAtk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARMOR, new org.apache.thrift.meta_data.FieldMetaData("armor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ELEMENT_DEF, new org.apache.thrift.meta_data.FieldMetaData("elementDef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ELEMENT_ATK, new org.apache.thrift.meta_data.FieldMetaData("elementAtk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LUCK_VALUE, new org.apache.thrift.meta_data.FieldMetaData("luckValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GREED, new org.apache.thrift.meta_data.FieldMetaData("greed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HP_RATIO, new org.apache.thrift.meta_data.FieldMetaData("hpRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ARMOR_RATIO, new org.apache.thrift.meta_data.FieldMetaData("armorRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EVASION, new org.apache.thrift.meta_data.FieldMetaData("evasion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MOVE_SPEED, new org.apache.thrift.meta_data.FieldMetaData("moveSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ATTACK_SPEED, new org.apache.thrift.meta_data.FieldMetaData("attackSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HIT_RATE, new org.apache.thrift.meta_data.FieldMetaData("hitRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MP_REGEN, new org.apache.thrift.meta_data.FieldMetaData("mpRegen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CRITICAL_RATE, new org.apache.thrift.meta_data.FieldMetaData("criticalRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CRITICAL_DMG_RATIO, new org.apache.thrift.meta_data.FieldMetaData("criticalDmgRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CRUSHING_BLOW_CHANCE, new org.apache.thrift.meta_data.FieldMetaData("crushingBlowChance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEALT_DMG_DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("dealtDmgDiscount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DMG_IMMORTAL_CHANCE, new org.apache.thrift.meta_data.FieldMetaData("dmgImmortalChance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HP_DRAIN, new org.apache.thrift.meta_data.FieldMetaData("hpDrain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DMG_REFLECTIVE, new org.apache.thrift.meta_data.FieldMetaData("dmgReflective", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(XEquipmentInfoThrift.class, metaDataMap);
  }

  public XEquipmentInfoThrift() {
  }

  public XEquipmentInfoThrift(
    long itemId,
    int id,
    String displayName,
    int minPhysicalAtk,
    int maxPhysicalAtk,
    int armor,
    int elementDef,
    int elementAtk,
    int luckValue,
    double greed,
    double hpRatio,
    double armorRatio,
    double evasion,
    double moveSpeed,
    double attackSpeed,
    double hitRate,
    double mpRegen,
    double criticalRate,
    double criticalDmgRatio,
    double crushingBlowChance,
    double dealtDmgDiscount,
    double dmgImmortalChance,
    int hpDrain,
    int dmgReflective)
  {
    this();
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.displayName = displayName;
    this.minPhysicalAtk = minPhysicalAtk;
    setMinPhysicalAtkIsSet(true);
    this.maxPhysicalAtk = maxPhysicalAtk;
    setMaxPhysicalAtkIsSet(true);
    this.armor = armor;
    setArmorIsSet(true);
    this.elementDef = elementDef;
    setElementDefIsSet(true);
    this.elementAtk = elementAtk;
    setElementAtkIsSet(true);
    this.luckValue = luckValue;
    setLuckValueIsSet(true);
    this.greed = greed;
    setGreedIsSet(true);
    this.hpRatio = hpRatio;
    setHpRatioIsSet(true);
    this.armorRatio = armorRatio;
    setArmorRatioIsSet(true);
    this.evasion = evasion;
    setEvasionIsSet(true);
    this.moveSpeed = moveSpeed;
    setMoveSpeedIsSet(true);
    this.attackSpeed = attackSpeed;
    setAttackSpeedIsSet(true);
    this.hitRate = hitRate;
    setHitRateIsSet(true);
    this.mpRegen = mpRegen;
    setMpRegenIsSet(true);
    this.criticalRate = criticalRate;
    setCriticalRateIsSet(true);
    this.criticalDmgRatio = criticalDmgRatio;
    setCriticalDmgRatioIsSet(true);
    this.crushingBlowChance = crushingBlowChance;
    setCrushingBlowChanceIsSet(true);
    this.dealtDmgDiscount = dealtDmgDiscount;
    setDealtDmgDiscountIsSet(true);
    this.dmgImmortalChance = dmgImmortalChance;
    setDmgImmortalChanceIsSet(true);
    this.hpDrain = hpDrain;
    setHpDrainIsSet(true);
    this.dmgReflective = dmgReflective;
    setDmgReflectiveIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public XEquipmentInfoThrift(XEquipmentInfoThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.itemId = other.itemId;
    this.id = other.id;
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
    this.minPhysicalAtk = other.minPhysicalAtk;
    this.maxPhysicalAtk = other.maxPhysicalAtk;
    this.armor = other.armor;
    this.elementDef = other.elementDef;
    this.elementAtk = other.elementAtk;
    this.luckValue = other.luckValue;
    this.greed = other.greed;
    this.hpRatio = other.hpRatio;
    this.armorRatio = other.armorRatio;
    this.evasion = other.evasion;
    this.moveSpeed = other.moveSpeed;
    this.attackSpeed = other.attackSpeed;
    this.hitRate = other.hitRate;
    this.mpRegen = other.mpRegen;
    this.criticalRate = other.criticalRate;
    this.criticalDmgRatio = other.criticalDmgRatio;
    this.crushingBlowChance = other.crushingBlowChance;
    this.dealtDmgDiscount = other.dealtDmgDiscount;
    this.dmgImmortalChance = other.dmgImmortalChance;
    this.hpDrain = other.hpDrain;
    this.dmgReflective = other.dmgReflective;
  }

  public XEquipmentInfoThrift deepCopy() {
    return new XEquipmentInfoThrift(this);
  }

  @Override
  public void clear() {
    setItemIdIsSet(false);
    this.itemId = 0;
    setIdIsSet(false);
    this.id = 0;
    this.displayName = null;
    setMinPhysicalAtkIsSet(false);
    this.minPhysicalAtk = 0;
    setMaxPhysicalAtkIsSet(false);
    this.maxPhysicalAtk = 0;
    setArmorIsSet(false);
    this.armor = 0;
    setElementDefIsSet(false);
    this.elementDef = 0;
    setElementAtkIsSet(false);
    this.elementAtk = 0;
    setLuckValueIsSet(false);
    this.luckValue = 0;
    setGreedIsSet(false);
    this.greed = 0.0;
    setHpRatioIsSet(false);
    this.hpRatio = 0.0;
    setArmorRatioIsSet(false);
    this.armorRatio = 0.0;
    setEvasionIsSet(false);
    this.evasion = 0.0;
    setMoveSpeedIsSet(false);
    this.moveSpeed = 0.0;
    setAttackSpeedIsSet(false);
    this.attackSpeed = 0.0;
    setHitRateIsSet(false);
    this.hitRate = 0.0;
    setMpRegenIsSet(false);
    this.mpRegen = 0.0;
    setCriticalRateIsSet(false);
    this.criticalRate = 0.0;
    setCriticalDmgRatioIsSet(false);
    this.criticalDmgRatio = 0.0;
    setCrushingBlowChanceIsSet(false);
    this.crushingBlowChance = 0.0;
    setDealtDmgDiscountIsSet(false);
    this.dealtDmgDiscount = 0.0;
    setDmgImmortalChanceIsSet(false);
    this.dmgImmortalChance = 0.0;
    setHpDrainIsSet(false);
    this.hpDrain = 0;
    setDmgReflectiveIsSet(false);
    this.dmgReflective = 0;
  }

  public long getItemId() {
    return this.itemId;
  }

  public XEquipmentInfoThrift setItemId(long itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public XEquipmentInfoThrift setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getDisplayName() {
    return this.displayName;
  }

  public XEquipmentInfoThrift setDisplayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  public int getMinPhysicalAtk() {
    return this.minPhysicalAtk;
  }

  public XEquipmentInfoThrift setMinPhysicalAtk(int minPhysicalAtk) {
    this.minPhysicalAtk = minPhysicalAtk;
    setMinPhysicalAtkIsSet(true);
    return this;
  }

  public void unsetMinPhysicalAtk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINPHYSICALATK_ISSET_ID);
  }

  /** Returns true if field minPhysicalAtk is set (has been assigned a value) and false otherwise */
  public boolean isSetMinPhysicalAtk() {
    return EncodingUtils.testBit(__isset_bitfield, __MINPHYSICALATK_ISSET_ID);
  }

  public void setMinPhysicalAtkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINPHYSICALATK_ISSET_ID, value);
  }

  public int getMaxPhysicalAtk() {
    return this.maxPhysicalAtk;
  }

  public XEquipmentInfoThrift setMaxPhysicalAtk(int maxPhysicalAtk) {
    this.maxPhysicalAtk = maxPhysicalAtk;
    setMaxPhysicalAtkIsSet(true);
    return this;
  }

  public void unsetMaxPhysicalAtk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXPHYSICALATK_ISSET_ID);
  }

  /** Returns true if field maxPhysicalAtk is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxPhysicalAtk() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXPHYSICALATK_ISSET_ID);
  }

  public void setMaxPhysicalAtkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXPHYSICALATK_ISSET_ID, value);
  }

  public int getArmor() {
    return this.armor;
  }

  public XEquipmentInfoThrift setArmor(int armor) {
    this.armor = armor;
    setArmorIsSet(true);
    return this;
  }

  public void unsetArmor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARMOR_ISSET_ID);
  }

  /** Returns true if field armor is set (has been assigned a value) and false otherwise */
  public boolean isSetArmor() {
    return EncodingUtils.testBit(__isset_bitfield, __ARMOR_ISSET_ID);
  }

  public void setArmorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARMOR_ISSET_ID, value);
  }

  public int getElementDef() {
    return this.elementDef;
  }

  public XEquipmentInfoThrift setElementDef(int elementDef) {
    this.elementDef = elementDef;
    setElementDefIsSet(true);
    return this;
  }

  public void unsetElementDef() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ELEMENTDEF_ISSET_ID);
  }

  /** Returns true if field elementDef is set (has been assigned a value) and false otherwise */
  public boolean isSetElementDef() {
    return EncodingUtils.testBit(__isset_bitfield, __ELEMENTDEF_ISSET_ID);
  }

  public void setElementDefIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ELEMENTDEF_ISSET_ID, value);
  }

  public int getElementAtk() {
    return this.elementAtk;
  }

  public XEquipmentInfoThrift setElementAtk(int elementAtk) {
    this.elementAtk = elementAtk;
    setElementAtkIsSet(true);
    return this;
  }

  public void unsetElementAtk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ELEMENTATK_ISSET_ID);
  }

  /** Returns true if field elementAtk is set (has been assigned a value) and false otherwise */
  public boolean isSetElementAtk() {
    return EncodingUtils.testBit(__isset_bitfield, __ELEMENTATK_ISSET_ID);
  }

  public void setElementAtkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ELEMENTATK_ISSET_ID, value);
  }

  public int getLuckValue() {
    return this.luckValue;
  }

  public XEquipmentInfoThrift setLuckValue(int luckValue) {
    this.luckValue = luckValue;
    setLuckValueIsSet(true);
    return this;
  }

  public void unsetLuckValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LUCKVALUE_ISSET_ID);
  }

  /** Returns true if field luckValue is set (has been assigned a value) and false otherwise */
  public boolean isSetLuckValue() {
    return EncodingUtils.testBit(__isset_bitfield, __LUCKVALUE_ISSET_ID);
  }

  public void setLuckValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LUCKVALUE_ISSET_ID, value);
  }

  public double getGreed() {
    return this.greed;
  }

  public XEquipmentInfoThrift setGreed(double greed) {
    this.greed = greed;
    setGreedIsSet(true);
    return this;
  }

  public void unsetGreed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GREED_ISSET_ID);
  }

  /** Returns true if field greed is set (has been assigned a value) and false otherwise */
  public boolean isSetGreed() {
    return EncodingUtils.testBit(__isset_bitfield, __GREED_ISSET_ID);
  }

  public void setGreedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GREED_ISSET_ID, value);
  }

  public double getHpRatio() {
    return this.hpRatio;
  }

  public XEquipmentInfoThrift setHpRatio(double hpRatio) {
    this.hpRatio = hpRatio;
    setHpRatioIsSet(true);
    return this;
  }

  public void unsetHpRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HPRATIO_ISSET_ID);
  }

  /** Returns true if field hpRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetHpRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __HPRATIO_ISSET_ID);
  }

  public void setHpRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HPRATIO_ISSET_ID, value);
  }

  public double getArmorRatio() {
    return this.armorRatio;
  }

  public XEquipmentInfoThrift setArmorRatio(double armorRatio) {
    this.armorRatio = armorRatio;
    setArmorRatioIsSet(true);
    return this;
  }

  public void unsetArmorRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARMORRATIO_ISSET_ID);
  }

  /** Returns true if field armorRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetArmorRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __ARMORRATIO_ISSET_ID);
  }

  public void setArmorRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARMORRATIO_ISSET_ID, value);
  }

  public double getEvasion() {
    return this.evasion;
  }

  public XEquipmentInfoThrift setEvasion(double evasion) {
    this.evasion = evasion;
    setEvasionIsSet(true);
    return this;
  }

  public void unsetEvasion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVASION_ISSET_ID);
  }

  /** Returns true if field evasion is set (has been assigned a value) and false otherwise */
  public boolean isSetEvasion() {
    return EncodingUtils.testBit(__isset_bitfield, __EVASION_ISSET_ID);
  }

  public void setEvasionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVASION_ISSET_ID, value);
  }

  public double getMoveSpeed() {
    return this.moveSpeed;
  }

  public XEquipmentInfoThrift setMoveSpeed(double moveSpeed) {
    this.moveSpeed = moveSpeed;
    setMoveSpeedIsSet(true);
    return this;
  }

  public void unsetMoveSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MOVESPEED_ISSET_ID);
  }

  /** Returns true if field moveSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetMoveSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __MOVESPEED_ISSET_ID);
  }

  public void setMoveSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MOVESPEED_ISSET_ID, value);
  }

  public double getAttackSpeed() {
    return this.attackSpeed;
  }

  public XEquipmentInfoThrift setAttackSpeed(double attackSpeed) {
    this.attackSpeed = attackSpeed;
    setAttackSpeedIsSet(true);
    return this;
  }

  public void unsetAttackSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTACKSPEED_ISSET_ID);
  }

  /** Returns true if field attackSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetAttackSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __ATTACKSPEED_ISSET_ID);
  }

  public void setAttackSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTACKSPEED_ISSET_ID, value);
  }

  public double getHitRate() {
    return this.hitRate;
  }

  public XEquipmentInfoThrift setHitRate(double hitRate) {
    this.hitRate = hitRate;
    setHitRateIsSet(true);
    return this;
  }

  public void unsetHitRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HITRATE_ISSET_ID);
  }

  /** Returns true if field hitRate is set (has been assigned a value) and false otherwise */
  public boolean isSetHitRate() {
    return EncodingUtils.testBit(__isset_bitfield, __HITRATE_ISSET_ID);
  }

  public void setHitRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HITRATE_ISSET_ID, value);
  }

  public double getMpRegen() {
    return this.mpRegen;
  }

  public XEquipmentInfoThrift setMpRegen(double mpRegen) {
    this.mpRegen = mpRegen;
    setMpRegenIsSet(true);
    return this;
  }

  public void unsetMpRegen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MPREGEN_ISSET_ID);
  }

  /** Returns true if field mpRegen is set (has been assigned a value) and false otherwise */
  public boolean isSetMpRegen() {
    return EncodingUtils.testBit(__isset_bitfield, __MPREGEN_ISSET_ID);
  }

  public void setMpRegenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MPREGEN_ISSET_ID, value);
  }

  public double getCriticalRate() {
    return this.criticalRate;
  }

  public XEquipmentInfoThrift setCriticalRate(double criticalRate) {
    this.criticalRate = criticalRate;
    setCriticalRateIsSet(true);
    return this;
  }

  public void unsetCriticalRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CRITICALRATE_ISSET_ID);
  }

  /** Returns true if field criticalRate is set (has been assigned a value) and false otherwise */
  public boolean isSetCriticalRate() {
    return EncodingUtils.testBit(__isset_bitfield, __CRITICALRATE_ISSET_ID);
  }

  public void setCriticalRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CRITICALRATE_ISSET_ID, value);
  }

  public double getCriticalDmgRatio() {
    return this.criticalDmgRatio;
  }

  public XEquipmentInfoThrift setCriticalDmgRatio(double criticalDmgRatio) {
    this.criticalDmgRatio = criticalDmgRatio;
    setCriticalDmgRatioIsSet(true);
    return this;
  }

  public void unsetCriticalDmgRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CRITICALDMGRATIO_ISSET_ID);
  }

  /** Returns true if field criticalDmgRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetCriticalDmgRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __CRITICALDMGRATIO_ISSET_ID);
  }

  public void setCriticalDmgRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CRITICALDMGRATIO_ISSET_ID, value);
  }

  public double getCrushingBlowChance() {
    return this.crushingBlowChance;
  }

  public XEquipmentInfoThrift setCrushingBlowChance(double crushingBlowChance) {
    this.crushingBlowChance = crushingBlowChance;
    setCrushingBlowChanceIsSet(true);
    return this;
  }

  public void unsetCrushingBlowChance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CRUSHINGBLOWCHANCE_ISSET_ID);
  }

  /** Returns true if field crushingBlowChance is set (has been assigned a value) and false otherwise */
  public boolean isSetCrushingBlowChance() {
    return EncodingUtils.testBit(__isset_bitfield, __CRUSHINGBLOWCHANCE_ISSET_ID);
  }

  public void setCrushingBlowChanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CRUSHINGBLOWCHANCE_ISSET_ID, value);
  }

  public double getDealtDmgDiscount() {
    return this.dealtDmgDiscount;
  }

  public XEquipmentInfoThrift setDealtDmgDiscount(double dealtDmgDiscount) {
    this.dealtDmgDiscount = dealtDmgDiscount;
    setDealtDmgDiscountIsSet(true);
    return this;
  }

  public void unsetDealtDmgDiscount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEALTDMGDISCOUNT_ISSET_ID);
  }

  /** Returns true if field dealtDmgDiscount is set (has been assigned a value) and false otherwise */
  public boolean isSetDealtDmgDiscount() {
    return EncodingUtils.testBit(__isset_bitfield, __DEALTDMGDISCOUNT_ISSET_ID);
  }

  public void setDealtDmgDiscountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEALTDMGDISCOUNT_ISSET_ID, value);
  }

  public double getDmgImmortalChance() {
    return this.dmgImmortalChance;
  }

  public XEquipmentInfoThrift setDmgImmortalChance(double dmgImmortalChance) {
    this.dmgImmortalChance = dmgImmortalChance;
    setDmgImmortalChanceIsSet(true);
    return this;
  }

  public void unsetDmgImmortalChance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DMGIMMORTALCHANCE_ISSET_ID);
  }

  /** Returns true if field dmgImmortalChance is set (has been assigned a value) and false otherwise */
  public boolean isSetDmgImmortalChance() {
    return EncodingUtils.testBit(__isset_bitfield, __DMGIMMORTALCHANCE_ISSET_ID);
  }

  public void setDmgImmortalChanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DMGIMMORTALCHANCE_ISSET_ID, value);
  }

  public int getHpDrain() {
    return this.hpDrain;
  }

  public XEquipmentInfoThrift setHpDrain(int hpDrain) {
    this.hpDrain = hpDrain;
    setHpDrainIsSet(true);
    return this;
  }

  public void unsetHpDrain() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HPDRAIN_ISSET_ID);
  }

  /** Returns true if field hpDrain is set (has been assigned a value) and false otherwise */
  public boolean isSetHpDrain() {
    return EncodingUtils.testBit(__isset_bitfield, __HPDRAIN_ISSET_ID);
  }

  public void setHpDrainIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HPDRAIN_ISSET_ID, value);
  }

  public int getDmgReflective() {
    return this.dmgReflective;
  }

  public XEquipmentInfoThrift setDmgReflective(int dmgReflective) {
    this.dmgReflective = dmgReflective;
    setDmgReflectiveIsSet(true);
    return this;
  }

  public void unsetDmgReflective() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DMGREFLECTIVE_ISSET_ID);
  }

  /** Returns true if field dmgReflective is set (has been assigned a value) and false otherwise */
  public boolean isSetDmgReflective() {
    return EncodingUtils.testBit(__isset_bitfield, __DMGREFLECTIVE_ISSET_ID);
  }

  public void setDmgReflectiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DMGREFLECTIVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Long)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((String)value);
      }
      break;

    case MIN_PHYSICAL_ATK:
      if (value == null) {
        unsetMinPhysicalAtk();
      } else {
        setMinPhysicalAtk((Integer)value);
      }
      break;

    case MAX_PHYSICAL_ATK:
      if (value == null) {
        unsetMaxPhysicalAtk();
      } else {
        setMaxPhysicalAtk((Integer)value);
      }
      break;

    case ARMOR:
      if (value == null) {
        unsetArmor();
      } else {
        setArmor((Integer)value);
      }
      break;

    case ELEMENT_DEF:
      if (value == null) {
        unsetElementDef();
      } else {
        setElementDef((Integer)value);
      }
      break;

    case ELEMENT_ATK:
      if (value == null) {
        unsetElementAtk();
      } else {
        setElementAtk((Integer)value);
      }
      break;

    case LUCK_VALUE:
      if (value == null) {
        unsetLuckValue();
      } else {
        setLuckValue((Integer)value);
      }
      break;

    case GREED:
      if (value == null) {
        unsetGreed();
      } else {
        setGreed((Double)value);
      }
      break;

    case HP_RATIO:
      if (value == null) {
        unsetHpRatio();
      } else {
        setHpRatio((Double)value);
      }
      break;

    case ARMOR_RATIO:
      if (value == null) {
        unsetArmorRatio();
      } else {
        setArmorRatio((Double)value);
      }
      break;

    case EVASION:
      if (value == null) {
        unsetEvasion();
      } else {
        setEvasion((Double)value);
      }
      break;

    case MOVE_SPEED:
      if (value == null) {
        unsetMoveSpeed();
      } else {
        setMoveSpeed((Double)value);
      }
      break;

    case ATTACK_SPEED:
      if (value == null) {
        unsetAttackSpeed();
      } else {
        setAttackSpeed((Double)value);
      }
      break;

    case HIT_RATE:
      if (value == null) {
        unsetHitRate();
      } else {
        setHitRate((Double)value);
      }
      break;

    case MP_REGEN:
      if (value == null) {
        unsetMpRegen();
      } else {
        setMpRegen((Double)value);
      }
      break;

    case CRITICAL_RATE:
      if (value == null) {
        unsetCriticalRate();
      } else {
        setCriticalRate((Double)value);
      }
      break;

    case CRITICAL_DMG_RATIO:
      if (value == null) {
        unsetCriticalDmgRatio();
      } else {
        setCriticalDmgRatio((Double)value);
      }
      break;

    case CRUSHING_BLOW_CHANCE:
      if (value == null) {
        unsetCrushingBlowChance();
      } else {
        setCrushingBlowChance((Double)value);
      }
      break;

    case DEALT_DMG_DISCOUNT:
      if (value == null) {
        unsetDealtDmgDiscount();
      } else {
        setDealtDmgDiscount((Double)value);
      }
      break;

    case DMG_IMMORTAL_CHANCE:
      if (value == null) {
        unsetDmgImmortalChance();
      } else {
        setDmgImmortalChance((Double)value);
      }
      break;

    case HP_DRAIN:
      if (value == null) {
        unsetHpDrain();
      } else {
        setHpDrain((Integer)value);
      }
      break;

    case DMG_REFLECTIVE:
      if (value == null) {
        unsetDmgReflective();
      } else {
        setDmgReflective((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return Long.valueOf(getItemId());

    case ID:
      return Integer.valueOf(getId());

    case DISPLAY_NAME:
      return getDisplayName();

    case MIN_PHYSICAL_ATK:
      return Integer.valueOf(getMinPhysicalAtk());

    case MAX_PHYSICAL_ATK:
      return Integer.valueOf(getMaxPhysicalAtk());

    case ARMOR:
      return Integer.valueOf(getArmor());

    case ELEMENT_DEF:
      return Integer.valueOf(getElementDef());

    case ELEMENT_ATK:
      return Integer.valueOf(getElementAtk());

    case LUCK_VALUE:
      return Integer.valueOf(getLuckValue());

    case GREED:
      return Double.valueOf(getGreed());

    case HP_RATIO:
      return Double.valueOf(getHpRatio());

    case ARMOR_RATIO:
      return Double.valueOf(getArmorRatio());

    case EVASION:
      return Double.valueOf(getEvasion());

    case MOVE_SPEED:
      return Double.valueOf(getMoveSpeed());

    case ATTACK_SPEED:
      return Double.valueOf(getAttackSpeed());

    case HIT_RATE:
      return Double.valueOf(getHitRate());

    case MP_REGEN:
      return Double.valueOf(getMpRegen());

    case CRITICAL_RATE:
      return Double.valueOf(getCriticalRate());

    case CRITICAL_DMG_RATIO:
      return Double.valueOf(getCriticalDmgRatio());

    case CRUSHING_BLOW_CHANCE:
      return Double.valueOf(getCrushingBlowChance());

    case DEALT_DMG_DISCOUNT:
      return Double.valueOf(getDealtDmgDiscount());

    case DMG_IMMORTAL_CHANCE:
      return Double.valueOf(getDmgImmortalChance());

    case HP_DRAIN:
      return Integer.valueOf(getHpDrain());

    case DMG_REFLECTIVE:
      return Integer.valueOf(getDmgReflective());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItemId();
    case ID:
      return isSetId();
    case DISPLAY_NAME:
      return isSetDisplayName();
    case MIN_PHYSICAL_ATK:
      return isSetMinPhysicalAtk();
    case MAX_PHYSICAL_ATK:
      return isSetMaxPhysicalAtk();
    case ARMOR:
      return isSetArmor();
    case ELEMENT_DEF:
      return isSetElementDef();
    case ELEMENT_ATK:
      return isSetElementAtk();
    case LUCK_VALUE:
      return isSetLuckValue();
    case GREED:
      return isSetGreed();
    case HP_RATIO:
      return isSetHpRatio();
    case ARMOR_RATIO:
      return isSetArmorRatio();
    case EVASION:
      return isSetEvasion();
    case MOVE_SPEED:
      return isSetMoveSpeed();
    case ATTACK_SPEED:
      return isSetAttackSpeed();
    case HIT_RATE:
      return isSetHitRate();
    case MP_REGEN:
      return isSetMpRegen();
    case CRITICAL_RATE:
      return isSetCriticalRate();
    case CRITICAL_DMG_RATIO:
      return isSetCriticalDmgRatio();
    case CRUSHING_BLOW_CHANCE:
      return isSetCrushingBlowChance();
    case DEALT_DMG_DISCOUNT:
      return isSetDealtDmgDiscount();
    case DMG_IMMORTAL_CHANCE:
      return isSetDmgImmortalChance();
    case HP_DRAIN:
      return isSetHpDrain();
    case DMG_REFLECTIVE:
      return isSetDmgReflective();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof XEquipmentInfoThrift)
      return this.equals((XEquipmentInfoThrift)that);
    return false;
  }

  public boolean equals(XEquipmentInfoThrift that) {
    if (that == null)
      return false;

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    boolean this_present_minPhysicalAtk = true;
    boolean that_present_minPhysicalAtk = true;
    if (this_present_minPhysicalAtk || that_present_minPhysicalAtk) {
      if (!(this_present_minPhysicalAtk && that_present_minPhysicalAtk))
        return false;
      if (this.minPhysicalAtk != that.minPhysicalAtk)
        return false;
    }

    boolean this_present_maxPhysicalAtk = true;
    boolean that_present_maxPhysicalAtk = true;
    if (this_present_maxPhysicalAtk || that_present_maxPhysicalAtk) {
      if (!(this_present_maxPhysicalAtk && that_present_maxPhysicalAtk))
        return false;
      if (this.maxPhysicalAtk != that.maxPhysicalAtk)
        return false;
    }

    boolean this_present_armor = true;
    boolean that_present_armor = true;
    if (this_present_armor || that_present_armor) {
      if (!(this_present_armor && that_present_armor))
        return false;
      if (this.armor != that.armor)
        return false;
    }

    boolean this_present_elementDef = true;
    boolean that_present_elementDef = true;
    if (this_present_elementDef || that_present_elementDef) {
      if (!(this_present_elementDef && that_present_elementDef))
        return false;
      if (this.elementDef != that.elementDef)
        return false;
    }

    boolean this_present_elementAtk = true;
    boolean that_present_elementAtk = true;
    if (this_present_elementAtk || that_present_elementAtk) {
      if (!(this_present_elementAtk && that_present_elementAtk))
        return false;
      if (this.elementAtk != that.elementAtk)
        return false;
    }

    boolean this_present_luckValue = true;
    boolean that_present_luckValue = true;
    if (this_present_luckValue || that_present_luckValue) {
      if (!(this_present_luckValue && that_present_luckValue))
        return false;
      if (this.luckValue != that.luckValue)
        return false;
    }

    boolean this_present_greed = true;
    boolean that_present_greed = true;
    if (this_present_greed || that_present_greed) {
      if (!(this_present_greed && that_present_greed))
        return false;
      if (this.greed != that.greed)
        return false;
    }

    boolean this_present_hpRatio = true;
    boolean that_present_hpRatio = true;
    if (this_present_hpRatio || that_present_hpRatio) {
      if (!(this_present_hpRatio && that_present_hpRatio))
        return false;
      if (this.hpRatio != that.hpRatio)
        return false;
    }

    boolean this_present_armorRatio = true;
    boolean that_present_armorRatio = true;
    if (this_present_armorRatio || that_present_armorRatio) {
      if (!(this_present_armorRatio && that_present_armorRatio))
        return false;
      if (this.armorRatio != that.armorRatio)
        return false;
    }

    boolean this_present_evasion = true;
    boolean that_present_evasion = true;
    if (this_present_evasion || that_present_evasion) {
      if (!(this_present_evasion && that_present_evasion))
        return false;
      if (this.evasion != that.evasion)
        return false;
    }

    boolean this_present_moveSpeed = true;
    boolean that_present_moveSpeed = true;
    if (this_present_moveSpeed || that_present_moveSpeed) {
      if (!(this_present_moveSpeed && that_present_moveSpeed))
        return false;
      if (this.moveSpeed != that.moveSpeed)
        return false;
    }

    boolean this_present_attackSpeed = true;
    boolean that_present_attackSpeed = true;
    if (this_present_attackSpeed || that_present_attackSpeed) {
      if (!(this_present_attackSpeed && that_present_attackSpeed))
        return false;
      if (this.attackSpeed != that.attackSpeed)
        return false;
    }

    boolean this_present_hitRate = true;
    boolean that_present_hitRate = true;
    if (this_present_hitRate || that_present_hitRate) {
      if (!(this_present_hitRate && that_present_hitRate))
        return false;
      if (this.hitRate != that.hitRate)
        return false;
    }

    boolean this_present_mpRegen = true;
    boolean that_present_mpRegen = true;
    if (this_present_mpRegen || that_present_mpRegen) {
      if (!(this_present_mpRegen && that_present_mpRegen))
        return false;
      if (this.mpRegen != that.mpRegen)
        return false;
    }

    boolean this_present_criticalRate = true;
    boolean that_present_criticalRate = true;
    if (this_present_criticalRate || that_present_criticalRate) {
      if (!(this_present_criticalRate && that_present_criticalRate))
        return false;
      if (this.criticalRate != that.criticalRate)
        return false;
    }

    boolean this_present_criticalDmgRatio = true;
    boolean that_present_criticalDmgRatio = true;
    if (this_present_criticalDmgRatio || that_present_criticalDmgRatio) {
      if (!(this_present_criticalDmgRatio && that_present_criticalDmgRatio))
        return false;
      if (this.criticalDmgRatio != that.criticalDmgRatio)
        return false;
    }

    boolean this_present_crushingBlowChance = true;
    boolean that_present_crushingBlowChance = true;
    if (this_present_crushingBlowChance || that_present_crushingBlowChance) {
      if (!(this_present_crushingBlowChance && that_present_crushingBlowChance))
        return false;
      if (this.crushingBlowChance != that.crushingBlowChance)
        return false;
    }

    boolean this_present_dealtDmgDiscount = true;
    boolean that_present_dealtDmgDiscount = true;
    if (this_present_dealtDmgDiscount || that_present_dealtDmgDiscount) {
      if (!(this_present_dealtDmgDiscount && that_present_dealtDmgDiscount))
        return false;
      if (this.dealtDmgDiscount != that.dealtDmgDiscount)
        return false;
    }

    boolean this_present_dmgImmortalChance = true;
    boolean that_present_dmgImmortalChance = true;
    if (this_present_dmgImmortalChance || that_present_dmgImmortalChance) {
      if (!(this_present_dmgImmortalChance && that_present_dmgImmortalChance))
        return false;
      if (this.dmgImmortalChance != that.dmgImmortalChance)
        return false;
    }

    boolean this_present_hpDrain = true;
    boolean that_present_hpDrain = true;
    if (this_present_hpDrain || that_present_hpDrain) {
      if (!(this_present_hpDrain && that_present_hpDrain))
        return false;
      if (this.hpDrain != that.hpDrain)
        return false;
    }

    boolean this_present_dmgReflective = true;
    boolean that_present_dmgReflective = true;
    if (this_present_dmgReflective || that_present_dmgReflective) {
      if (!(this_present_dmgReflective && that_present_dmgReflective))
        return false;
      if (this.dmgReflective != that.dmgReflective)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(XEquipmentInfoThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayName()).compareTo(other.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, other.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinPhysicalAtk()).compareTo(other.isSetMinPhysicalAtk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinPhysicalAtk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minPhysicalAtk, other.minPhysicalAtk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxPhysicalAtk()).compareTo(other.isSetMaxPhysicalAtk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxPhysicalAtk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxPhysicalAtk, other.maxPhysicalAtk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArmor()).compareTo(other.isSetArmor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArmor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.armor, other.armor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElementDef()).compareTo(other.isSetElementDef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElementDef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementDef, other.elementDef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElementAtk()).compareTo(other.isSetElementAtk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElementAtk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementAtk, other.elementAtk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLuckValue()).compareTo(other.isSetLuckValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLuckValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.luckValue, other.luckValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGreed()).compareTo(other.isSetGreed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGreed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.greed, other.greed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHpRatio()).compareTo(other.isSetHpRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHpRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hpRatio, other.hpRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArmorRatio()).compareTo(other.isSetArmorRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArmorRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.armorRatio, other.armorRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvasion()).compareTo(other.isSetEvasion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvasion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evasion, other.evasion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoveSpeed()).compareTo(other.isSetMoveSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoveSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moveSpeed, other.moveSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttackSpeed()).compareTo(other.isSetAttackSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttackSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attackSpeed, other.attackSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHitRate()).compareTo(other.isSetHitRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHitRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hitRate, other.hitRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMpRegen()).compareTo(other.isSetMpRegen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMpRegen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mpRegen, other.mpRegen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCriticalRate()).compareTo(other.isSetCriticalRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCriticalRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.criticalRate, other.criticalRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCriticalDmgRatio()).compareTo(other.isSetCriticalDmgRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCriticalDmgRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.criticalDmgRatio, other.criticalDmgRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrushingBlowChance()).compareTo(other.isSetCrushingBlowChance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrushingBlowChance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crushingBlowChance, other.crushingBlowChance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDealtDmgDiscount()).compareTo(other.isSetDealtDmgDiscount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDealtDmgDiscount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealtDmgDiscount, other.dealtDmgDiscount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDmgImmortalChance()).compareTo(other.isSetDmgImmortalChance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDmgImmortalChance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dmgImmortalChance, other.dmgImmortalChance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHpDrain()).compareTo(other.isSetHpDrain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHpDrain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hpDrain, other.hpDrain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDmgReflective()).compareTo(other.isSetDmgReflective());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDmgReflective()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dmgReflective, other.dmgReflective);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("XEquipmentInfoThrift(");
    boolean first = true;

    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayName:");
    if (this.displayName == null) {
      sb.append("null");
    } else {
      sb.append(this.displayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minPhysicalAtk:");
    sb.append(this.minPhysicalAtk);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxPhysicalAtk:");
    sb.append(this.maxPhysicalAtk);
    first = false;
    if (!first) sb.append(", ");
    sb.append("armor:");
    sb.append(this.armor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("elementDef:");
    sb.append(this.elementDef);
    first = false;
    if (!first) sb.append(", ");
    sb.append("elementAtk:");
    sb.append(this.elementAtk);
    first = false;
    if (!first) sb.append(", ");
    sb.append("luckValue:");
    sb.append(this.luckValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("greed:");
    sb.append(this.greed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hpRatio:");
    sb.append(this.hpRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("armorRatio:");
    sb.append(this.armorRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("evasion:");
    sb.append(this.evasion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("moveSpeed:");
    sb.append(this.moveSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attackSpeed:");
    sb.append(this.attackSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hitRate:");
    sb.append(this.hitRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mpRegen:");
    sb.append(this.mpRegen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("criticalRate:");
    sb.append(this.criticalRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("criticalDmgRatio:");
    sb.append(this.criticalDmgRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("crushingBlowChance:");
    sb.append(this.crushingBlowChance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dealtDmgDiscount:");
    sb.append(this.dealtDmgDiscount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dmgImmortalChance:");
    sb.append(this.dmgImmortalChance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hpDrain:");
    sb.append(this.hpDrain);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dmgReflective:");
    sb.append(this.dmgReflective);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class XEquipmentInfoThriftStandardSchemeFactory implements SchemeFactory {
    public XEquipmentInfoThriftStandardScheme getScheme() {
      return new XEquipmentInfoThriftStandardScheme();
    }
  }

  private static class XEquipmentInfoThriftStandardScheme extends StandardScheme<XEquipmentInfoThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, XEquipmentInfoThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.itemId = iprot.readI64();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayName = iprot.readString();
              struct.setDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN_PHYSICAL_ATK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minPhysicalAtk = iprot.readI32();
              struct.setMinPhysicalAtkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_PHYSICAL_ATK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxPhysicalAtk = iprot.readI32();
              struct.setMaxPhysicalAtkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ARMOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.armor = iprot.readI32();
              struct.setArmorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ELEMENT_DEF
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.elementDef = iprot.readI32();
              struct.setElementDefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ELEMENT_ATK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.elementAtk = iprot.readI32();
              struct.setElementAtkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LUCK_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.luckValue = iprot.readI32();
              struct.setLuckValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GREED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.greed = iprot.readDouble();
              struct.setGreedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HP_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hpRatio = iprot.readDouble();
              struct.setHpRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ARMOR_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.armorRatio = iprot.readDouble();
              struct.setArmorRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EVASION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.evasion = iprot.readDouble();
              struct.setEvasionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MOVE_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.moveSpeed = iprot.readDouble();
              struct.setMoveSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ATTACK_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.attackSpeed = iprot.readDouble();
              struct.setAttackSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HIT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hitRate = iprot.readDouble();
              struct.setHitRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MP_REGEN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mpRegen = iprot.readDouble();
              struct.setMpRegenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CRITICAL_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.criticalRate = iprot.readDouble();
              struct.setCriticalRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CRITICAL_DMG_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.criticalDmgRatio = iprot.readDouble();
              struct.setCriticalDmgRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CRUSHING_BLOW_CHANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.crushingBlowChance = iprot.readDouble();
              struct.setCrushingBlowChanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DEALT_DMG_DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dealtDmgDiscount = iprot.readDouble();
              struct.setDealtDmgDiscountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // DMG_IMMORTAL_CHANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dmgImmortalChance = iprot.readDouble();
              struct.setDmgImmortalChanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // HP_DRAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hpDrain = iprot.readI32();
              struct.setHpDrainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DMG_REFLECTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dmgReflective = iprot.readI32();
              struct.setDmgReflectiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, XEquipmentInfoThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI64(struct.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(struct.displayName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_PHYSICAL_ATK_FIELD_DESC);
      oprot.writeI32(struct.minPhysicalAtk);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_PHYSICAL_ATK_FIELD_DESC);
      oprot.writeI32(struct.maxPhysicalAtk);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARMOR_FIELD_DESC);
      oprot.writeI32(struct.armor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ELEMENT_DEF_FIELD_DESC);
      oprot.writeI32(struct.elementDef);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ELEMENT_ATK_FIELD_DESC);
      oprot.writeI32(struct.elementAtk);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LUCK_VALUE_FIELD_DESC);
      oprot.writeI32(struct.luckValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GREED_FIELD_DESC);
      oprot.writeDouble(struct.greed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HP_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.hpRatio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARMOR_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.armorRatio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EVASION_FIELD_DESC);
      oprot.writeDouble(struct.evasion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MOVE_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.moveSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATTACK_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.attackSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.hitRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MP_REGEN_FIELD_DESC);
      oprot.writeDouble(struct.mpRegen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CRITICAL_RATE_FIELD_DESC);
      oprot.writeDouble(struct.criticalRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CRITICAL_DMG_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.criticalDmgRatio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CRUSHING_BLOW_CHANCE_FIELD_DESC);
      oprot.writeDouble(struct.crushingBlowChance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEALT_DMG_DISCOUNT_FIELD_DESC);
      oprot.writeDouble(struct.dealtDmgDiscount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DMG_IMMORTAL_CHANCE_FIELD_DESC);
      oprot.writeDouble(struct.dmgImmortalChance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HP_DRAIN_FIELD_DESC);
      oprot.writeI32(struct.hpDrain);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DMG_REFLECTIVE_FIELD_DESC);
      oprot.writeI32(struct.dmgReflective);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class XEquipmentInfoThriftTupleSchemeFactory implements SchemeFactory {
    public XEquipmentInfoThriftTupleScheme getScheme() {
      return new XEquipmentInfoThriftTupleScheme();
    }
  }

  private static class XEquipmentInfoThriftTupleScheme extends TupleScheme<XEquipmentInfoThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, XEquipmentInfoThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetItemId()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetDisplayName()) {
        optionals.set(2);
      }
      if (struct.isSetMinPhysicalAtk()) {
        optionals.set(3);
      }
      if (struct.isSetMaxPhysicalAtk()) {
        optionals.set(4);
      }
      if (struct.isSetArmor()) {
        optionals.set(5);
      }
      if (struct.isSetElementDef()) {
        optionals.set(6);
      }
      if (struct.isSetElementAtk()) {
        optionals.set(7);
      }
      if (struct.isSetLuckValue()) {
        optionals.set(8);
      }
      if (struct.isSetGreed()) {
        optionals.set(9);
      }
      if (struct.isSetHpRatio()) {
        optionals.set(10);
      }
      if (struct.isSetArmorRatio()) {
        optionals.set(11);
      }
      if (struct.isSetEvasion()) {
        optionals.set(12);
      }
      if (struct.isSetMoveSpeed()) {
        optionals.set(13);
      }
      if (struct.isSetAttackSpeed()) {
        optionals.set(14);
      }
      if (struct.isSetHitRate()) {
        optionals.set(15);
      }
      if (struct.isSetMpRegen()) {
        optionals.set(16);
      }
      if (struct.isSetCriticalRate()) {
        optionals.set(17);
      }
      if (struct.isSetCriticalDmgRatio()) {
        optionals.set(18);
      }
      if (struct.isSetCrushingBlowChance()) {
        optionals.set(19);
      }
      if (struct.isSetDealtDmgDiscount()) {
        optionals.set(20);
      }
      if (struct.isSetDmgImmortalChance()) {
        optionals.set(21);
      }
      if (struct.isSetHpDrain()) {
        optionals.set(22);
      }
      if (struct.isSetDmgReflective()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetItemId()) {
        oprot.writeI64(struct.itemId);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetDisplayName()) {
        oprot.writeString(struct.displayName);
      }
      if (struct.isSetMinPhysicalAtk()) {
        oprot.writeI32(struct.minPhysicalAtk);
      }
      if (struct.isSetMaxPhysicalAtk()) {
        oprot.writeI32(struct.maxPhysicalAtk);
      }
      if (struct.isSetArmor()) {
        oprot.writeI32(struct.armor);
      }
      if (struct.isSetElementDef()) {
        oprot.writeI32(struct.elementDef);
      }
      if (struct.isSetElementAtk()) {
        oprot.writeI32(struct.elementAtk);
      }
      if (struct.isSetLuckValue()) {
        oprot.writeI32(struct.luckValue);
      }
      if (struct.isSetGreed()) {
        oprot.writeDouble(struct.greed);
      }
      if (struct.isSetHpRatio()) {
        oprot.writeDouble(struct.hpRatio);
      }
      if (struct.isSetArmorRatio()) {
        oprot.writeDouble(struct.armorRatio);
      }
      if (struct.isSetEvasion()) {
        oprot.writeDouble(struct.evasion);
      }
      if (struct.isSetMoveSpeed()) {
        oprot.writeDouble(struct.moveSpeed);
      }
      if (struct.isSetAttackSpeed()) {
        oprot.writeDouble(struct.attackSpeed);
      }
      if (struct.isSetHitRate()) {
        oprot.writeDouble(struct.hitRate);
      }
      if (struct.isSetMpRegen()) {
        oprot.writeDouble(struct.mpRegen);
      }
      if (struct.isSetCriticalRate()) {
        oprot.writeDouble(struct.criticalRate);
      }
      if (struct.isSetCriticalDmgRatio()) {
        oprot.writeDouble(struct.criticalDmgRatio);
      }
      if (struct.isSetCrushingBlowChance()) {
        oprot.writeDouble(struct.crushingBlowChance);
      }
      if (struct.isSetDealtDmgDiscount()) {
        oprot.writeDouble(struct.dealtDmgDiscount);
      }
      if (struct.isSetDmgImmortalChance()) {
        oprot.writeDouble(struct.dmgImmortalChance);
      }
      if (struct.isSetHpDrain()) {
        oprot.writeI32(struct.hpDrain);
      }
      if (struct.isSetDmgReflective()) {
        oprot.writeI32(struct.dmgReflective);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, XEquipmentInfoThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.itemId = iprot.readI64();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.displayName = iprot.readString();
        struct.setDisplayNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.minPhysicalAtk = iprot.readI32();
        struct.setMinPhysicalAtkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.maxPhysicalAtk = iprot.readI32();
        struct.setMaxPhysicalAtkIsSet(true);
      }
      if (incoming.get(5)) {
        struct.armor = iprot.readI32();
        struct.setArmorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.elementDef = iprot.readI32();
        struct.setElementDefIsSet(true);
      }
      if (incoming.get(7)) {
        struct.elementAtk = iprot.readI32();
        struct.setElementAtkIsSet(true);
      }
      if (incoming.get(8)) {
        struct.luckValue = iprot.readI32();
        struct.setLuckValueIsSet(true);
      }
      if (incoming.get(9)) {
        struct.greed = iprot.readDouble();
        struct.setGreedIsSet(true);
      }
      if (incoming.get(10)) {
        struct.hpRatio = iprot.readDouble();
        struct.setHpRatioIsSet(true);
      }
      if (incoming.get(11)) {
        struct.armorRatio = iprot.readDouble();
        struct.setArmorRatioIsSet(true);
      }
      if (incoming.get(12)) {
        struct.evasion = iprot.readDouble();
        struct.setEvasionIsSet(true);
      }
      if (incoming.get(13)) {
        struct.moveSpeed = iprot.readDouble();
        struct.setMoveSpeedIsSet(true);
      }
      if (incoming.get(14)) {
        struct.attackSpeed = iprot.readDouble();
        struct.setAttackSpeedIsSet(true);
      }
      if (incoming.get(15)) {
        struct.hitRate = iprot.readDouble();
        struct.setHitRateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.mpRegen = iprot.readDouble();
        struct.setMpRegenIsSet(true);
      }
      if (incoming.get(17)) {
        struct.criticalRate = iprot.readDouble();
        struct.setCriticalRateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.criticalDmgRatio = iprot.readDouble();
        struct.setCriticalDmgRatioIsSet(true);
      }
      if (incoming.get(19)) {
        struct.crushingBlowChance = iprot.readDouble();
        struct.setCrushingBlowChanceIsSet(true);
      }
      if (incoming.get(20)) {
        struct.dealtDmgDiscount = iprot.readDouble();
        struct.setDealtDmgDiscountIsSet(true);
      }
      if (incoming.get(21)) {
        struct.dmgImmortalChance = iprot.readDouble();
        struct.setDmgImmortalChanceIsSet(true);
      }
      if (incoming.get(22)) {
        struct.hpDrain = iprot.readI32();
        struct.setHpDrainIsSet(true);
      }
      if (incoming.get(23)) {
        struct.dmgReflective = iprot.readI32();
        struct.setDmgReflectiveIsSet(true);
      }
    }
  }

}

